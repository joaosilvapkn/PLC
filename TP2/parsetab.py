
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDOREQNEQleftGTELTE><left+-$left*/%leftUMINUS!leftINDEXAND DEF ELSE EQ FLOAT FLOATTYPE GTE ID IF INPUT INTTYPE LTE NEQ NUM OR PRINT PRINTLN RETURN STRING STRINGTYPE VAR VOIDTYPE WHILEprogram : declist start funlist entrypoint stmtlist start :entrypoint :fun : DEF fun_name '(' funargs ')' ftype '{' stmtlist '}' fun_name : ID ftype : typestmt : PRINT '(' expr ')' ';' stmt : PRINTLN '(' ')' ';' \n            | PRINTLN '(' expr ')' ';' stmt : WHILE new_label '(' expr ')' jz block stmt : IF '(' expr ')' jz block\n            | IF '(' expr ')' jz block ELSE jmp jz_label block jmp :jz :jz_label :new_label :var_declare : VAR ID '[' NUM ']' type ';' var_declare : VAR ID '[' NUM ']' '[' NUM ']' type ';' var_declare : VAR ID type '=' expr ';'\n                   | VAR ID type ';' stmt : ID '=' expr ';' stmt : expr '[' expr ']' '=' expr ';' stmt : RETURN expr ';' \n            | RETURN ';' stmt : expr ';' expr : INPUT '(' ')' expr : STRINGTYPE '(' expr ')' expr : INTTYPE '(' expr ')' expr : FLOATTYPE '(' expr ')' expr : expr '+' expr \n            | expr '-' expr\n            | expr '*' expr \n            | expr '/' expr\n            | expr '>' expr\n            | expr '<' expr \n            | expr GTE expr\n            | expr LTE expr \n            | expr EQ expr\n            | expr NEQ expr expr : expr '%' expr\n            | expr AND expr\n            | expr OR exprexpr : expr '$' exprexpr : '!' expr expr : '-' expr %prec UMINUS expr : ID expr : expr '[' expr ']' %prec INDEX expr : STRING expr : NUM expr : FLOATexpr : ID '(' fcall ')' expr : '(' expr ')' type : STRINGTYPEtype : INTTYPEtype : VOIDTYPEtype : FLOATTYPEtype :  type '[' ']'  declist : declist var_declare\n               |funlist : funlist fun \n               |stmtlist : stmtlist stmt \n                | funargs : idlist\n                 |idlist : idlist ',' ID type\n              | ID type fcall : exprlist\n             |exprlist : exprlist ',' expr\n                | expr block : '{' stmtlist '}' \n             | stmt "
    
_lr_action_items = {'VAR':([0,2,4,22,83,119,153,],[-59,5,-58,-20,-19,-17,-18,]),'DEF':([0,2,3,4,6,9,22,83,119,153,158,],[-59,-2,-61,-58,10,-60,-20,-19,-17,-18,-4,]),'PRINT':([0,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,126,127,138,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,25,-20,-62,-25,-24,-19,-23,-17,-8,-14,-21,-7,-9,-14,25,-63,25,-11,-63,-73,25,-18,-22,-10,-13,25,-4,-15,-72,25,-12,]),'PRINTLN':([0,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,126,127,138,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,28,-20,-62,-25,-24,-19,-23,-17,-8,-14,-21,-7,-9,-14,28,-63,28,-11,-63,-73,28,-18,-22,-10,-13,28,-4,-15,-72,28,-12,]),'WHILE':([0,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,126,127,138,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,29,-20,-62,-25,-24,-19,-23,-17,-8,-14,-21,-7,-9,-14,29,-63,29,-11,-63,-73,29,-18,-22,-10,-13,29,-4,-15,-72,29,-12,]),'IF':([0,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,126,127,138,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,30,-20,-62,-25,-24,-19,-23,-17,-8,-14,-21,-7,-9,-14,30,-63,30,-11,-63,-73,30,-18,-22,-10,-13,30,-4,-15,-72,30,-12,]),'ID':([0,2,3,4,5,6,8,9,10,17,21,22,24,26,32,37,38,42,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,83,84,104,110,116,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,7,-3,-63,-60,19,31,44,-20,-62,44,44,44,44,80,44,44,-25,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-24,44,44,44,-19,44,44,-23,135,-17,-8,-14,-21,44,-7,44,-9,-14,31,-63,31,-11,-63,-73,31,-18,-22,-10,-13,31,-4,-15,-72,31,-12,]),'RETURN':([0,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,126,127,138,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,32,-20,-62,-25,-24,-19,-23,-17,-8,-14,-21,-7,-9,-14,32,-63,32,-11,-63,-73,32,-18,-22,-10,-13,32,-4,-15,-72,32,-12,]),'INPUT':([0,2,3,4,6,8,9,17,21,22,24,26,32,37,38,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,33,33,-20,-62,33,33,33,33,33,33,-25,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-24,33,33,33,-19,33,33,-23,-17,-8,-14,-21,33,-7,33,-9,-14,33,-63,33,-11,-63,-73,33,-18,-22,-10,-13,33,-4,-15,-72,33,-12,]),'STRINGTYPE':([0,2,3,4,6,7,8,9,17,21,22,24,26,32,37,38,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,80,83,84,104,110,115,119,123,126,127,129,135,136,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,13,-63,-60,34,34,-20,-62,34,34,34,34,13,34,34,-25,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-24,34,34,34,13,-19,34,34,-23,13,-17,-8,-14,-21,34,13,13,-7,34,-9,-14,34,-63,34,-11,-63,-73,34,-18,-22,-10,-13,34,-4,-15,-72,34,-12,]),'INTTYPE':([0,2,3,4,6,7,8,9,17,21,22,24,26,32,37,38,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,80,83,84,104,110,115,119,123,126,127,129,135,136,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,14,-63,-60,35,35,-20,-62,35,35,35,35,14,35,35,-25,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-24,35,35,35,14,-19,35,35,-23,14,-17,-8,-14,-21,35,14,14,-7,35,-9,-14,35,-63,35,-11,-63,-73,35,-18,-22,-10,-13,35,-4,-15,-72,35,-12,]),'FLOATTYPE':([0,2,3,4,6,7,8,9,17,21,22,24,26,32,37,38,43,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,80,83,84,104,110,115,119,123,126,127,129,135,136,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,16,-63,-60,36,36,-20,-62,36,36,36,36,16,36,36,-25,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,16,-19,36,36,-23,16,-17,-8,-14,-21,36,16,16,-7,36,-9,-14,36,-63,36,-11,-63,-73,36,-18,-22,-10,-13,36,-4,-15,-72,36,-12,]),'!':([0,2,3,4,6,8,9,17,21,22,24,26,32,37,38,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,38,38,-20,-62,38,38,38,38,38,38,-25,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-24,38,38,38,-19,38,38,-23,-17,-8,-14,-21,38,-7,38,-9,-14,38,-63,38,-11,-63,-73,38,-18,-22,-10,-13,38,-4,-15,-72,38,-12,]),'-':([0,2,3,4,6,8,9,17,21,22,24,26,27,31,32,37,38,39,40,41,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,73,74,75,76,77,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,109,110,111,112,113,114,119,120,122,123,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,37,37,-20,-62,37,52,-46,37,37,37,-48,-49,-50,-46,52,37,52,37,-25,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,52,-24,37,37,37,-45,-44,-19,37,52,-52,52,-30,-31,-32,-33,52,52,52,52,52,52,-40,52,52,-43,52,37,52,52,52,-23,-26,52,52,52,-17,52,-47,-8,52,-14,-21,-51,37,-27,-28,-29,-47,-7,37,-9,-14,37,52,-63,52,37,-11,-63,-73,37,-18,-22,-10,-13,37,-4,-15,-72,37,-12,]),'STRING':([0,2,3,4,6,8,9,17,21,22,24,26,32,37,38,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,39,39,-20,-62,39,39,39,39,39,39,-25,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-24,39,39,39,-19,39,39,-23,-17,-8,-14,-21,39,-7,39,-9,-14,39,-63,39,-11,-63,-73,39,-18,-22,-10,-13,39,-4,-15,-72,39,-12,]),'NUM':([0,2,3,4,6,8,9,11,17,21,22,24,26,32,37,38,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,81,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,20,40,40,-20,-62,40,40,40,40,40,40,-25,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-24,40,40,40,118,-19,40,40,-23,-17,-8,-14,-21,40,-7,40,-9,-14,40,-63,40,-11,-63,-73,40,-18,-22,-10,-13,40,-4,-15,-72,40,-12,]),'FLOAT':([0,2,3,4,6,8,9,17,21,22,24,26,32,37,38,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,71,73,74,75,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,41,41,-20,-62,41,41,41,41,41,41,-25,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-24,41,41,41,-19,41,41,-23,-17,-8,-14,-21,41,-7,41,-9,-14,41,-63,41,-11,-63,-73,41,-18,-22,-10,-13,41,-4,-15,-72,41,-12,]),'(':([0,2,3,4,6,8,9,17,18,19,21,22,24,25,26,28,29,30,31,32,33,34,35,36,37,38,44,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,83,84,104,110,119,123,126,127,129,138,139,140,141,142,144,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,],[-59,-2,-61,-58,-3,-63,-60,26,42,-5,26,-20,-62,47,26,65,-16,67,69,26,72,73,74,75,26,26,69,26,26,-25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,104,26,26,26,-24,26,26,26,-19,26,26,-23,-17,-8,-14,-21,26,-7,26,-9,-14,26,-63,26,-11,-63,-73,26,-18,-22,-10,-13,26,-4,-15,-72,26,-12,]),'$end':([0,1,2,3,4,6,8,9,17,22,24,50,71,83,110,119,123,127,138,140,149,151,153,154,155,158,160,162,],[-59,0,-2,-61,-58,-3,-63,-60,-1,-20,-62,-25,-24,-19,-23,-17,-8,-21,-7,-9,-11,-73,-18,-22,-10,-4,-72,-12,]),'[':([7,12,13,14,15,16,27,31,39,40,41,43,44,45,46,48,70,76,77,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,117,120,122,125,128,130,131,132,134,137,143,145,146,147,],[11,23,-53,-54,-55,-56,49,-46,-48,-49,-50,81,-46,84,-57,84,84,-45,-44,23,84,-52,84,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,84,84,84,84,-26,84,84,84,23,84,-47,84,-51,-27,-28,-29,23,-47,84,23,23,84,]),'VOIDTYPE':([7,43,80,115,135,136,],[15,15,15,15,15,15,]),'=':([12,13,14,15,16,31,46,122,],[21,-53,-54,-55,-56,68,-57,139,]),';':([12,13,14,15,16,27,31,32,39,40,41,44,45,46,70,76,77,82,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,111,121,122,124,128,130,131,132,137,146,147,],[22,-53,-54,-55,-56,50,-46,71,-48,-49,-50,-46,83,-57,110,-45,-44,119,-52,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,123,127,-26,138,-47,140,-51,-27,-28,-29,-47,153,154,]),',':([13,14,15,16,39,40,41,44,46,76,77,79,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,108,109,111,117,128,130,131,132,137,143,145,],[-53,-54,-55,-56,-48,-49,-50,-46,-57,-45,-44,116,-52,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,129,-71,-26,-67,-51,-27,-28,-29,-47,-70,-66,]),')':([13,14,15,16,39,40,41,42,44,46,48,65,69,72,76,77,78,79,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,107,108,109,111,112,113,114,117,125,128,130,131,132,137,143,145,],[-53,-54,-55,-56,-48,-49,-50,-65,-46,-57,86,102,-69,111,-45,-44,115,-64,121,-52,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,124,126,128,-68,-71,-26,130,131,132,-67,141,-51,-27,-28,-29,-47,-70,-66,]),'{':([13,14,15,16,46,126,133,134,141,142,148,156,159,161,],[-53,-54,-55,-56,-57,-14,144,-6,-14,150,150,-13,-15,150,]),']':([20,23,39,40,41,44,76,77,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,111,118,120,128,130,131,132,137,],[43,46,-48,-49,-50,-46,-45,-44,-52,122,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-26,136,137,-51,-27,-28,-29,-47,]),'}':([24,50,71,110,123,127,138,140,144,149,150,151,152,154,155,157,160,162,],[-62,-25,-24,-23,-8,-21,-7,-9,-63,-11,-63,-73,158,-22,-10,160,-72,-12,]),'+':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[51,-46,-48,-49,-50,-46,51,51,51,-45,-44,51,-52,51,-30,-31,-32,-33,51,51,51,51,51,51,-40,51,51,-43,51,51,51,51,-26,51,51,51,51,-47,51,-51,-27,-28,-29,-47,51,51,]),'*':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[53,-46,-48,-49,-50,-46,53,53,53,-45,-44,53,-52,53,53,53,-32,-33,53,53,53,53,53,53,-40,53,53,53,53,53,53,53,-26,53,53,53,53,-47,53,-51,-27,-28,-29,-47,53,53,]),'/':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[54,-46,-48,-49,-50,-46,54,54,54,-45,-44,54,-52,54,54,54,-32,-33,54,54,54,54,54,54,-40,54,54,54,54,54,54,54,-26,54,54,54,54,-47,54,-51,-27,-28,-29,-47,54,54,]),'>':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[55,-46,-48,-49,-50,-46,55,55,55,-45,-44,55,-52,55,-30,-31,-32,-33,-34,-35,-36,-37,55,55,-40,55,55,-43,55,55,55,55,-26,55,55,55,55,-47,55,-51,-27,-28,-29,-47,55,55,]),'<':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[56,-46,-48,-49,-50,-46,56,56,56,-45,-44,56,-52,56,-30,-31,-32,-33,-34,-35,-36,-37,56,56,-40,56,56,-43,56,56,56,56,-26,56,56,56,56,-47,56,-51,-27,-28,-29,-47,56,56,]),'GTE':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[57,-46,-48,-49,-50,-46,57,57,57,-45,-44,57,-52,57,-30,-31,-32,-33,-34,-35,-36,-37,57,57,-40,57,57,-43,57,57,57,57,-26,57,57,57,57,-47,57,-51,-27,-28,-29,-47,57,57,]),'LTE':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[58,-46,-48,-49,-50,-46,58,58,58,-45,-44,58,-52,58,-30,-31,-32,-33,-34,-35,-36,-37,58,58,-40,58,58,-43,58,58,58,58,-26,58,58,58,58,-47,58,-51,-27,-28,-29,-47,58,58,]),'EQ':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[59,-46,-48,-49,-50,-46,59,59,59,-45,-44,59,-52,59,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,59,59,59,59,-26,59,59,59,59,-47,59,-51,-27,-28,-29,-47,59,59,]),'NEQ':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[60,-46,-48,-49,-50,-46,60,60,60,-45,-44,60,-52,60,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,60,60,60,60,-26,60,60,60,60,-47,60,-51,-27,-28,-29,-47,60,60,]),'%':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[61,-46,-48,-49,-50,-46,61,61,61,-45,-44,61,-52,61,61,61,-32,-33,61,61,61,61,61,61,-40,61,61,61,61,61,61,61,-26,61,61,61,61,-47,61,-51,-27,-28,-29,-47,61,61,]),'AND':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[62,-46,-48,-49,-50,-46,62,62,62,-45,-44,62,-52,62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,62,62,62,62,-26,62,62,62,62,-47,62,-51,-27,-28,-29,-47,62,62,]),'OR':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[63,-46,-48,-49,-50,-46,63,63,63,-45,-44,63,-52,63,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,63,63,63,63,-26,63,63,63,63,-47,63,-51,-27,-28,-29,-47,63,63,]),'$':([27,31,39,40,41,44,45,48,70,76,77,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,111,112,113,114,120,122,125,128,130,131,132,137,143,147,],[64,-46,-48,-49,-50,-46,64,64,64,-45,-44,64,-52,64,-30,-31,-32,-33,64,64,64,64,64,64,-40,64,64,-43,64,64,64,64,-26,64,64,64,64,-47,64,-51,-27,-28,-29,-47,64,64,]),'ELSE':([50,71,110,123,127,138,140,149,151,154,155,160,162,],[-25,-24,-23,-8,-21,-7,-9,156,-73,-22,-10,-72,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'start':([2,],[3,]),'var_declare':([2,],[4,]),'funlist':([3,],[6,]),'entrypoint':([6,],[8,]),'fun':([6,],[9,]),'type':([7,43,80,115,135,136,],[12,82,117,134,145,146,]),'stmtlist':([8,144,150,],[17,152,157,]),'fun_name':([10,],[18,]),'stmt':([17,142,148,152,157,161,],[24,151,151,24,24,151,]),'expr':([17,21,26,32,37,38,47,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,73,74,75,84,104,129,139,142,148,152,157,161,],[27,45,48,70,76,77,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,105,106,109,112,113,114,120,125,143,147,27,27,27,27,27,]),'new_label':([29,],[66,]),'funargs':([42,],[78,]),'idlist':([42,],[79,]),'fcall':([69,],[107,]),'exprlist':([69,],[108,]),'ftype':([115,],[133,]),'jz':([126,141,],[142,148,]),'block':([142,148,161,],[149,155,162,]),'jmp':([156,],[159,]),'jz_label':([159,],[161,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist start funlist entrypoint stmtlist','program',5,'p_program','parser.py',22),
  ('start -> <empty>','start',0,'p_start','parser.py',27),
  ('entrypoint -> <empty>','entrypoint',0,'p_entrypoint','parser.py',32),
  ('fun -> DEF fun_name ( funargs ) ftype { stmtlist }','fun',9,'p_fun','parser.py',37),
  ('fun_name -> ID','fun_name',1,'p_fun_name','parser.py',48),
  ('ftype -> type','ftype',1,'p_ftype','parser.py',59),
  ('stmt -> PRINT ( expr ) ;','stmt',5,'p_stmt_print','parser.py',67),
  ('stmt -> PRINTLN ( ) ;','stmt',4,'p_stmt_println','parser.py',76),
  ('stmt -> PRINTLN ( expr ) ;','stmt',5,'p_stmt_println','parser.py',77),
  ('stmt -> WHILE new_label ( expr ) jz block','stmt',7,'p_stmt_while','parser.py',88),
  ('stmt -> IF ( expr ) jz block','stmt',6,'p_stmt_ifelse','parser.py',98),
  ('stmt -> IF ( expr ) jz block ELSE jmp jz_label block','stmt',10,'p_stmt_ifelse','parser.py',99),
  ('jmp -> <empty>','jmp',0,'p_jmp','parser.py',110),
  ('jz -> <empty>','jz',0,'p_jz','parser.py',117),
  ('jz_label -> <empty>','jz_label',0,'p_jz_label','parser.py',125),
  ('new_label -> <empty>','new_label',0,'p_new_label','parser.py',130),
  ('var_declare -> VAR ID [ NUM ] type ;','var_declare',7,'p_declare_arr1','parser.py',137),
  ('var_declare -> VAR ID [ NUM ] [ NUM ] type ;','var_declare',10,'p_declare_arr2','parser.py',147),
  ('var_declare -> VAR ID type = expr ;','var_declare',6,'p_declare_var','parser.py',165),
  ('var_declare -> VAR ID type ;','var_declare',4,'p_declare_var','parser.py',166),
  ('stmt -> ID = expr ;','stmt',4,'p_stmt_assign','parser.py',185),
  ('stmt -> expr [ expr ] = expr ;','stmt',7,'p_stmt_assign_arr','parser.py',202),
  ('stmt -> RETURN expr ;','stmt',3,'p_stmt_return','parser.py',211),
  ('stmt -> RETURN ;','stmt',2,'p_stmt_return','parser.py',212),
  ('stmt -> expr ;','stmt',2,'p_stmt_expr','parser.py',227),
  ('expr -> INPUT ( )','expr',3,'p_expr_input','parser.py',235),
  ('expr -> STRINGTYPE ( expr )','expr',4,'p_expr_str','parser.py',241),
  ('expr -> INTTYPE ( expr )','expr',4,'p_expr_atoi','parser.py',252),
  ('expr -> FLOATTYPE ( expr )','expr',4,'p_expr_ftoi','parser.py',262),
  ('expr -> expr + expr','expr',3,'p_expr_binop','parser.py',274),
  ('expr -> expr - expr','expr',3,'p_expr_binop','parser.py',275),
  ('expr -> expr * expr','expr',3,'p_expr_binop','parser.py',276),
  ('expr -> expr / expr','expr',3,'p_expr_binop','parser.py',277),
  ('expr -> expr > expr','expr',3,'p_expr_binop','parser.py',278),
  ('expr -> expr < expr','expr',3,'p_expr_binop','parser.py',279),
  ('expr -> expr GTE expr','expr',3,'p_expr_binop','parser.py',280),
  ('expr -> expr LTE expr','expr',3,'p_expr_binop','parser.py',281),
  ('expr -> expr EQ expr','expr',3,'p_expr_binop','parser.py',282),
  ('expr -> expr NEQ expr','expr',3,'p_expr_binop','parser.py',283),
  ('expr -> expr % expr','expr',3,'p_expr_binop_int','parser.py',307),
  ('expr -> expr AND expr','expr',3,'p_expr_binop_int','parser.py',308),
  ('expr -> expr OR expr','expr',3,'p_expr_binop_int','parser.py',309),
  ('expr -> expr $ expr','expr',3,'p_expr_concat','parser.py',319),
  ('expr -> ! expr','expr',2,'p_expr_not','parser.py',327),
  ('expr -> - expr','expr',2,'p_expr_neg','parser.py',337),
  ('expr -> ID','expr',1,'p_expr_id','parser.py',348),
  ('expr -> expr [ expr ]','expr',4,'p_expr_ind','parser.py',367),
  ('expr -> STRING','expr',1,'p_expr_string','parser.py',377),
  ('expr -> NUM','expr',1,'p_expr_num','parser.py',383),
  ('expr -> FLOAT','expr',1,'p_expr_float','parser.py',388),
  ('expr -> ID ( fcall )','expr',4,'p_expr_fun','parser.py',394),
  ('expr -> ( expr )','expr',3,'p_expr','parser.py',408),
  ('type -> STRINGTYPE','type',1,'p_type_string','parser.py',415),
  ('type -> INTTYPE','type',1,'p_type_int','parser.py',420),
  ('type -> VOIDTYPE','type',1,'p_type_void','parser.py',425),
  ('type -> FLOATTYPE','type',1,'p_type_float','parser.py',428),
  ('type -> type [ ]','type',3,'p_type_arr','parser.py',433),
  ('declist -> declist var_declare','declist',2,'p_declist','parser.py',438),
  ('declist -> <empty>','declist',0,'p_declist','parser.py',439),
  ('funlist -> funlist fun','funlist',2,'p_funlist','parser.py',443),
  ('funlist -> <empty>','funlist',0,'p_funlist','parser.py',444),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parser.py',448),
  ('stmtlist -> <empty>','stmtlist',0,'p_stmtlist','parser.py',449),
  ('funargs -> idlist','funargs',1,'p_funargs','parser.py',453),
  ('funargs -> <empty>','funargs',0,'p_funargs','parser.py',454),
  ('idlist -> idlist , ID type','idlist',4,'p_idlist','parser.py',460),
  ('idlist -> ID type','idlist',2,'p_idlist','parser.py',461),
  ('fcall -> exprlist','fcall',1,'p_fcall','parser.py',471),
  ('fcall -> <empty>','fcall',0,'p_fcall','parser.py',472),
  ('exprlist -> exprlist , expr','exprlist',3,'p_exprlist','parser.py',477),
  ('exprlist -> expr','exprlist',1,'p_exprlist','parser.py',478),
  ('block -> { stmtlist }','block',3,'p_block','parser.py',486),
  ('block -> stmt','block',1,'p_block','parser.py',487),
]
